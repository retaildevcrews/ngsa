name: Docker Build

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
    branches:
      - main

    paths:
    - 'src/**'
    - 'Dockerfile'
    - '.github/workflows/appPR.yaml'

  push:
    branches:
      - main

    paths:
    - 'src/**'
    - 'Dockerfile'
    - '.github/workflows/appPR.yaml'

    tags:
      - v*

jobs:

  build:

    runs-on: ubuntu-latest
    env:
      # copy the config value to environment variables
      # do not copy the actual secrets!

      DOCKER_REPO: ${{ secrets.DOCKER_REPO }}

      # These are used in if: conditions
      DOCKER_SET: false

    steps:
    - uses: actions/checkout@v2

    - name: Set conditions
      run: |
        # check that all Docker secrets are set
        if [[ "${{ secrets.DOCKER_PAT }}" != "" && "${{ secrets.DOCKER_REPO }}" != "" && "${{ secrets.DOCKER_USER }}" != "" ]];
        then
          echo "::set-env name=DOCKER_SET::true"
        fi
        
    - name: PR Closed
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && ! github.event.pull_request.merged }}

      run: |

        # handle PR Closed event by building / pushing main branch
        
        # checkout parent branch (usually "main")
        git config pull.ff only
        git fetch --all
        git checkout ${{ github.base_ref }}
        git pull

    - name: PR Merged
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged }}

      run: |

        # Do not build on PR Merged
        
        # Skip remaining steps
        echo "::set-env name=AZURE_SET::false"
        echo "::set-env name=DOCKER_SET::false"
        echo "::set-env name=ACR_SET::false"

    - name: Docker Login
      if: ${{ env.DOCKER_SET == 'true' }}
      run: |
        # login to dockerhub
        echo "${{ secrets.DOCKER_PAT }}" | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin

    - name: Docker Pull Test
      run: |
        # Pull the latest image if needed
        # This doesn't have to be a separate step, but makes the output easier to read and debug
        docker pull mcr.microsoft.com/dotnet/core/sdk:3.1

    - name: Docker Build Test
      run: |
        # build test image
        docker build . -t test --target test

#    - name: Install WebV
#      if: ${{ env.AZURE_SET == 'true' }}
#      run: |
#        dotnet tool install -g webvalidate

#    - name: Start helium container
#      if: ${{ env.AZURE_SET == 'true' }}
#      run: |
        # run the app
#        docker run -d --name hcs -p 4120:4120 --env KEYVAULT_NAME=$KEYVAULT_NAME --env AUTH_TYPE=CLI -v ~/.azure:/root/.azure test
        
#        echo "Waiting for web server to start and run initial tests ..."
#        sleep 25

#    - name: Run WebV
#      if: ${{ env.AZURE_SET == 'true' }}
#      run: |
        # run web validation test
        # fail on any validation errors
#        cd TestFiles
#        webv -s localhost:4120 --max-errors 0 -f e2e.json
#        cd ..

#    - name: Display coverage results
#      if: ${{ env.AZURE_SET == 'true' }}
#      run: |
        # wait for helium to shutdown
#        sleep 15

        # display the results
#        docker logs hcs | tail -n 24

#    - name: Display full test results
#      if: ${{ env.AZURE_SET == 'true' }}
#      run: |
        # display the results
#        docker logs hcs

    - name: Docker Pull Release
      run: |
        # Pull the latest image if needed
        docker pull mcr.microsoft.com/dotnet/core/aspnet:3.1-alpine

    - name: Docker Build Release
      run: |
        # build image
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]
        then
          docker build . -t image --build-arg TAG=true
        else
          docker build . -t image
        fi
        
    - name: Docker Tag and Push
      if: ${{ env.DOCKER_SET == 'true' }}
      run: |
        # tag the repo with :beta
        docker tag image $DOCKER_REPO:beta

        # Tag image based on repo tag if a github label
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]
        then

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,'  | sed -e 's/^v//')

          # tag the image with :version and :latest
          docker tag image $DOCKER_REPO:$VERSION
          docker tag image $DOCKER_REPO:latest
        fi

        # Push to the repo
        docker push $DOCKER_REPO
